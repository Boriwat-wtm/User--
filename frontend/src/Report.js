import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import "./Report.css";

function Report() {
  const navigate = useNavigate();
  const [category, setCategory] = useState("");
  const [detail, setDetail] = useState("");
  const [message, setMessage] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showSuccessAnimation, setShowSuccessAnimation] = useState(false);

  const MAX_DETAIL_LENGTH = 500;

  const handleBack = () => {
    navigate(-1);
  };

  const handleDetailChange = (e) => {
    const inputText = e.target.value;
    if (inputText.length <= MAX_DETAIL_LENGTH) {
      setDetail(inputText);
      if (message && message.includes("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")) {
        setMessage("");
      }
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!category) {
      setMessage("‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö");
      return;
    }
    if (!detail.trim()) {
      setMessage("‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô");
      return;
    }

    setIsSubmitting(true);
    setMessage("");

    try {
      const res = await fetch("http://localhost:5001/api/report", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          category,
          detail
        })
      });

      if (!res.ok) {
        const t = await res.text();
        console.error("Report error:", t);
        throw new Error("REQUEST_FAILED");
      }

      const data = await res.json();
      console.log("Report saved:", data);

      setShowSuccessAnimation(true);
      setMessage("üéâ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤! ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ");
      setCategory("");
      setDetail("");

      setTimeout(() => setShowSuccessAnimation(false), 3000);
    } catch (err) {
      console.error(err);
      setMessage("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
    } finally {
      setIsSubmitting(false);
    }
  };

  const problemTypes = [
    { 
      value: "", 
      label: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤", 
      disabled: true,
      emoji: "üîΩ"
    },
    { 
      value: "technical", 
      label: "‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ", 
      emoji: "‚ö°",
      description: "‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πà‡∏°, ‡πÇ‡∏´‡∏•‡∏î‡∏ä‡πâ‡∏≤, ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"
    },
    { 
      value: "display", 
      label: "‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•", 
      emoji: "üñºÔ∏è",
      description: "‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á, ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î, ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏û‡∏µ‡πâ‡∏¢‡∏ô"
    },
    { 
      value: "payment", 
      label: "‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô", 
      emoji: "üí∞",
      description: "‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ, ‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡∏¥‡∏î"
    },
    { 
      value: "upload", 
      label: "‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", 
      emoji: "üìÅ",
      description: "‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ, ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô"
    },
    { 
      value: "account", 
      label: "‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", 
      emoji: "üë§",
      description: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ, ‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
    },
    { 
      value: "suggestion", 
      label: "‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞", 
      emoji: "üí°",
      description: "‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á, ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà"
    },
    { 
      value: "other", 
      label: "‡∏≠‡∏∑‡πà‡∏ô‡πÜ", 
      emoji: "üìù",
      description: "‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô"
    }
  ];

  return (
    <div className="report-container">
      {showSuccessAnimation && (
        <div className="success-overlay">
          <div className="success-animation">
            <div className="check-circle">
              <div className="check-mark"></div>
            </div>
            <h3>‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h3>
            <p>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏£‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á</p>
          </div>
        </div>
      )}

      <div className="report-wrapper">
        <header className="report-header">
          <button className="back-btn" onClick={handleBack}>
            <span className="back-icon">‚Üê</span>
            <span>‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</span>
          </button>
          <div className="header-content">
            <h1>üîß Report Center</h1>
            <p>‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞</p>
          </div>
        </header>

        <main className="report-main">
          <div className="report-card">
            <div className="card-header">
              <div className="pulse-dot"></div>
              <h2>‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ä‡∏£‡πå‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢</h2>
              <span className="subtitle">‡πÄ‡∏£‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ü‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á</span>
            </div>

            <form className="report-form" onSubmit={handleSubmit}>
              <div className="input-group">
                <label className="input-label">
                  <span className="label-text">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤</span>
                  <span className="required-dot">*</span>
                </label>
                
                <div className="custom-select">
                  <select
                    value={category}
                    onChange={(e) => setCategory(e.target.value)}
                    className="select-input"
                    required
                  >
                    {problemTypes.map((type) => (
                      <option 
                        key={type.value} 
                        value={type.value}
                        disabled={type.disabled}
                      >
                        {type.emoji} {type.label}
                      </option>
                    ))}
                  </select>
                  <div className="select-arrow">‚åÑ</div>
                </div>

                {category && (
                  <div className="category-info">
                    <span className="category-emoji">
                      {problemTypes.find(t => t.value === category)?.emoji}
                    </span>
                    <span className="category-desc">
                      {problemTypes.find(t => t.value === category)?.description}
                    </span>
                  </div>
                )}
              </div>

              <div className="input-group">
                <label className="input-label">
                  <span className="label-text">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</span>
                  <span className="required-dot">*</span>
                </label>
                
                <div className="textarea-wrapper">
                  <textarea
                    value={detail}
                    onChange={handleDetailChange}
                    placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞...&#10;&#10;üí≠ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:&#10;‚Ä¢ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤&#10;‚Ä¢ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤&#10;‚Ä¢ ‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô&#10;‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"
                    className="detail-input"
                    maxLength={MAX_DETAIL_LENGTH}
                    rows="7"
                    required
                  />
                  
                  <div className="input-footer">
                    <div className="writing-tips">
                      <span className="tip-icon">üí°</span>
                      <span>‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô</span>
                    </div>
                    <div className="char-counter">
                      <span className={detail.length >= MAX_DETAIL_LENGTH ? 'limit' : ''}>
                        {detail.length}/{MAX_DETAIL_LENGTH}
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              <div className="quick-tips">
                <h4>üìã ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û</h4>
                <div className="tips-grid">
                  <div className="tip-item">
                    <span className="tip-number">1</span>
                    <div>
                      <strong>‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤</strong>
                      <p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤</p>
                    </div>
                  </div>
                  <div className="tip-item">
                    <span className="tip-number">2</span>
                    <div>
                      <strong>‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô</strong>
                      <p>‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤</p>
                    </div>
                  </div>
                  <div className="tip-item">
                    <span className="tip-number">3</span>
                    <div>
                      <strong>‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô</strong>
                      <p>‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á vs ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á</p>
                    </div>
                  </div>
                </div>
              </div>

              {message && (
                <div className={`status-message ${message.includes("üéâ") ? 'success' : 'error'}`}>
                  <div className="message-content">
                    <span className="message-text">{message}</span>
                  </div>
                </div>
              )}

              <div className="form-actions">
                <button 
                  type="button" 
                  className="cancel-btn" 
                  onClick={handleBack}
                >
                  <span>‚úï</span>
                  <span>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</span>
                </button>
                
                <button 
                  type="submit" 
                  className="submit-btn"
                  disabled={isSubmitting}
                >
                  {isSubmitting ? (
                    <>
                      <div className="loading-spinner"></div>
                      <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...</span>
                    </>
                  ) : (
                    <>
                      <span>üöÄ</span>
                      <span>‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</span>
                    </>
                  )}
                </button>
              </div>
            </form>
          </div>
        </main>
      </div>
    </div>
  );
}

export default Report;